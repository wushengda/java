<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="www.aima.xsd/1.0.0"
	elementFormDefault="qualified" targetNamespace="www.aima.xsd/1.0.0">

	<xs:element name="aima" type="Model">
		<xs:annotation>
			<xs:appinfo source="http://www.baidu.com">艾玛</xs:appinfo>
			<xs:documentation xml:lang="en" source="描述">
				<code>&lt;aima&gt;</code>
				这是定义艾玛的介绍
			</xs:documentation>
		</xs:annotation>
	</xs:element>


	<xs:element name="all">
		<xs:complexType>
			<xs:all minOccurs="0">
				<xs:element name="firstname" type="xs:string" />
				<xs:element name="lastname" type="xs:string" />
			</xs:all>
		</xs:complexType>
	</xs:element>
	<!-- 上面的例子指示 "firstname" 和 "lastname" 元素能够以任何顺序出现，每个元素都能出现零次或一次！ -->


	<xs:element name="any">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="firstname" type="xs:string" />
				<xs:element name="lastname" type="xs:string" />
				<xs:any minOccurs="0" />
			</xs:sequence>
		</xs:complexType>
	</xs:element>
	<!-- 通过使用 <any> 元素，创作者可以用任何元素扩展 "all" 的内容（在 <lastname> 之后） -->


	<xs:element name="anyAttribute">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="type" type="xs:string" />
				<xs:element name="color" type="xs:string" />
			</xs:sequence>
			<xs:anyAttribute />
		</xs:complexType>
	</xs:element>
	<!--
		上面的例子展示了针对 "anyAttribute" 元素的一个声明。通过使用 <anyAttribute> 元素，创作者能够向 "dog"
		元素添加任意数量的属性
	-->


	<xs:attribute name="attribute">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:pattern value="[A-Z][A-Z]" />
			</xs:restriction>
		</xs:simpleType>
	</xs:attribute>
	<xs:complexType name="someComplexType">
		<xs:attribute ref="attribute" />
	</xs:complexType>
	<!--上面的例子指示 "code" 属性有一个限定。唯一可接受的值是大写字母 A 到 Z 中的两个字母。 -->
	<!-- 如需使用在复杂类型中一个已有的属性定义来声明一个属性，请使用 ref 属性 -->


	<xs:attributeGroup name="attributeGroup">
		<xs:attribute name="attr1" type="xs:string" />
		<xs:attribute name="attr2" type="xs:integer" />
	</xs:attributeGroup>
	<xs:complexType name="person">
		<xs:attributeGroup ref="attributeGroup" />
	</xs:complexType>
	<!-- 上面的例子定义了一个名为 "attributeGroup" 的属性组，在名为 "person" 的复杂类型中使用。  -->


	<xs:element name="choice">
		<xs:complexType>
			<xs:choice>
				<xs:element name="employee" type="xs:string" />
				<xs:element name="member" type="xs:string" />
			</xs:choice>
		</xs:complexType>
	</xs:element>
	<!-- 上面的例子定义 "choice" 元素必须包含一个 "employee" 元素或一个 "member" 元素 -->





	<xs:element name="complexContent" type="complexContentExtention" />

	<xs:complexType name="complexContentBase">
		<xs:sequence>
			<xs:element name="firstname" type="xs:string" />
			<xs:element name="lastname" type="xs:string" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="complexContentExtention">
		<xs:complexContent>
			<xs:extension base="complexContentBase">
				<xs:sequence>
					<xs:element name="address" type="xs:string" />
					<xs:element name="city" type="xs:string" />
					<xs:element name="country" type="xs:string" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		在上例中，"complexType"元素必须按顺序包含下面的元素："firstname"、"lastname"、"address"、"city"
		以及 "country"。
	-->



	<xs:element name="complexType" type="complexTypeExtention" />

	<xs:complexType name="complexTypeBase">
		<xs:sequence>
			<xs:element name="firstname" type="xs:string" />
			<xs:element name="lastname" type="xs:string" />
		</xs:sequence>
	</xs:complexType>

	<xs:complexType name="complexTypeExtention">
		<xs:complexContent>
			<xs:extension base="complexTypeBase">
				<xs:sequence>
					<xs:element name="address" type="xs:string" />
					<xs:element name="city" type="xs:string" />
					<xs:element name="country" type="xs:string" />
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<!--
		在上面的例子中，上面的 "employee" 元素必须按顺序包含下列元素："firstname", "lastname",
		"address", "city" 以及 "country"。
	-->



	<xs:group name="custGroup">
		<xs:sequence>
			<xs:element name="customer" type="xs:string" />
			<xs:element name="orderdetails" type="xs:string" />
			<xs:element name="billto" type="xs:string" />
			<xs:element name="shipto" type="xs:string" />
		</xs:sequence>
	</xs:group>

	<xs:element name="order" type="ordertype" />

	<xs:complexType name="ordertype">
		<xs:group ref="custGroup" />
		<xs:attribute name="status" type="xs:string" />
	</xs:complexType>
	<!-- 上面的例子定义一个包含四个元素的序列的组，并在一个复杂类型定义中使用了这个 group 元素 -->



	<xs:element name="stringvalues" type="valuelist" />
	<xs:simpleType name="valuelist">
		<xs:list itemType="xs:string" />
	</xs:simpleType>
	<!-- 文档中的 "stringvalues" 元素类似这样（注意这个列表有四个列表项）：-->
	<!-- <stringvalues>I love XML Schema</stringvalues> -->




	<xs:notation name="gif" public="image/gif" system="view.exe" />
	<xs:notation name="jpeg" public="image/jpeg" system="view.exe" />

	<xs:element name="image">
		<xs:complexType>
			<xs:attribute name="type">
				<xs:simpleType>
					<xs:restriction base="xs:NOTATION">
						<xs:enumeration value="gif" />
						<xs:enumeration value="jpeg" />
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
		</xs:complexType>
	</xs:element>
	<!-- 文档中的 "image" 元素是这样的<image type="gif"></image> -->


	<!-- restriction元素 -->
	<xs:element name="age">
		<xs:simpleType>
			<xs:restriction base="xs:integer">
				<xs:minInclusive value="0" />
				<xs:maxInclusive value="100" />
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!-- 例子定义了一个带有约束且名为 "age" 的元素。age 的值不能小于 0 或大于 100 -->
	<xs:element name="password">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:minLength value="5" />
				<xs:maxLength value="8" />
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!--
		本例定义了一个名为 "password" 元素。"password" 元素是带有约束的简单类型。值必须为最少 5 个字符且最多 8 个字符
	-->
	<xs:element name="initials">
		<xs:simpleType>
			<xs:restriction base="xs:string">
				<xs:pattern value="[a-zA-Z][a-zA-Z][a-zA-Z]" />
			</xs:restriction>
		</xs:simpleType>
	</xs:element>
	<!--
		本例定义了一个名为 "initials" 的元素。"initials" 元素是带有约束的简单类型。可接受的值是三个从 a 到 z
		的大写或小写字母
	-->




	<!-- union元素定义多个simpleType定义的集合 -->
	<xs:element name="jeans_size">
		<xs:simpleType>
			<xs:union memberTypes="sizebyno sizebystring" />
		</xs:simpleType>
	</xs:element>

	<xs:simpleType name="sizebyno">
		<xs:restriction base="xs:positiveInteger">
			<xs:maxInclusive value="42" />
		</xs:restriction>
	</xs:simpleType>

	<xs:simpleType name="sizebystring">
		<xs:restriction base="xs:string">
			<xs:enumeration value="small" />
			<xs:enumeration value="medium" />
			<xs:enumeration value="large" />
		</xs:restriction>
	</xs:simpleType>
	<!-- 本例是一个合并了两个简单类型的简单类型 -->



	

	<xs:complexType name="Model">
	</xs:complexType>




</xs:schema>